namespace olm {
    void set_logger(Logger logger);
};

callback interface Logger {
    void log(string log_line);
};

[Error]
enum MachineCreationError {
    "Identifier",
    "CryptoStore",
};

[Error]
enum CryptoStoreError {
    "CryptoStore",
    "OlmError",
};

dictionary DeviceLists {
    sequence<string> changed;
    sequence<string> left;
};

dictionary Device {
    string user_id;
    string device_id;
    record<DOMString, string> keys;
};

dictionary Sas {
    string other_user_id;
    string other_device_id;
    string flow_id;
    Request request;
};

[TaggedUnion]
interface Request {
    ToDevice(string request_id, string event_type, string body);
    KeysUpload(string request_id, string body);
    KeysQuery(string request_id, string body);
};

enum RequestType {
    "KeysQuery",
    "KeysUpload",
    "ToDevice",
};

[Threadsafe]
interface OlmMachine {
    [Throws=MachineCreationError]
    constructor([ByRef] string user_id, [ByRef] string device_id, [ByRef] string path);

    void receive_sync_changes([ByRef] string events,
                              DeviceLists device_changes,
                              record<DOMString, u32> key_counts);

    record<DOMString, string> identity_keys();

    string user_id();
    string device_id();

    Device? get_device([ByRef] string user_id, [ByRef] string device_id);
    sequence<Device> get_user_devices([ByRef] string user_id);
    sequence<Request> outgoing_requests();

    [Throws=CryptoStoreError]
    void mark_request_as_sent(
        [ByRef] string request_id,
        RequestType request_type,
        [ByRef] string response
    );

    [Throws=CryptoStoreError]
    Sas start_verification([ByRef] Device device);
};
